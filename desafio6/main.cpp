#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <gmp.h>
#include <gmpxx.h>
#include <iostream>
using std::cout;
using std::cerr;
using std::endl;

#include <string>
using std::string;

#include <cstdlib>
using std::exit;

#include "cryptlib.h"
using CryptoPP::Exception;

#include "hex.h"
using CryptoPP::HexEncoder;
using CryptoPP::HexDecoder;

#include "filters.h"
using CryptoPP::StringSink;
using CryptoPP::StringSource;
using CryptoPP::StreamTransformationFilter;

#include "aes.h"
using CryptoPP::AES;

#include "modes.h"
using CryptoPP::ECB_Mode;

using namespace std;

string decrypto(string &key_s) {
    string decryptedtext;
    byte key[16];
    for (int i = 0; i < key_s.size(); i++)
        key[i] = (byte) key_s[i];

	string ciphertext = "0028287CB1DB945CAF456601DB0ABDB32366C41CC04A0F858FB244D97BFF866982E89947E481147BCEF2625F6FB0379BD98B685E71446733BA313F9588F719CB25E8393F53F795CA25BFC9A116F026FDC5DE79CA042E5499CD453DD4ECDEEBC29D0109A909C5C7D6D2802DCF366BE55515BF55632E1DC62B20938A66D4B6CF8E55DF559A38B07D9B5641C38BC334A54E8DF615485EA9DE01E6595FBC51C88E841CA924FC1DDEE8A9D63ED675E4B426DBFF2071613A5D742D4B0E11DFE3359E6439CE2E6AE61CD51623EDBA4C72EA5BB2F23ABE6B92D15459F6B653A433EFEFE3BB7B1DDE84D0B16B0F41479FA22219FEAB254117662239EBA438D40A2B207BC2DA0A57882F224FCAD3F307454650B9C01C5596F8887DC30CD7B3F6450F2AB0AA44F5EA5A83D7CAC9F216BF99514AAED2C094CB4709BEB9DA263BF36B957437873F2759CC939884048936B9233BC262CF672522A3B64E582708E9D85D0FDDD8B375BCE68B0CA852D0CFC85519FA8B0E6347ABF7973D6C6387CBD591AD6DEDD9B86E539A4FE4463E3C9D34353B55CE856B9C13FBA7A7BC0A35AF53E97907B8FC01E48C24520FAF89160829C9622A7CC6C2F4FEEDB90D2DC8F77BCADD2BAB1B76FE148539D65DD3D7A2A3510F467EFA2DCDB30389C868D279521177D66CE873B205B7AA984D761D16AA845B4E91032D759C7BCB9920550E22896DA89680624A4BE044311FA36F793D8BE3E4260EA7CE17762D3A2569E60E01A25FB7A59BB4715F059B4FDAFCA2D6FA0F01A289A74616A257AA88621B7E94E28F6B9D6B9E54BC01737D49C6A06C9B699BC200674B2E97F19DCCE450D3ACD6F1064FDF62E15A030A16B7D37EA851C390477AAB655417B92AD8550BC603AD05B03BE0E8E70B370A93CF53D8213543BAE3F2E19C5F2471D11B84991DC59835B72C302591C6FEA27CED4B03EC98A14B8A6E9B6B40CB63329A821474EA30A306192780563E2B957AB1ADA7872EA1542EB64674D8AFAAABD3703B59BD0A0FED7BC1BEF851416F42AF82E04C3E0F13E1C82F36093B0FE824C3E81D22623B1525DF6F753D5D38B3F028E83862DC69CD947CE9B2F0A0E04144B5D930354CA18DF0004D213222A7D9B1BB305B4DB02285D2A05C11F6E9DB4F8CE7442118AB4B0E29D89930D42AC56BE969551C9403AB53882ACFE557EBD9E5A5EC4837F034DFDF4D63D2705600C15D275361A0B8DAB2C7A122B44613DEBFCBD99E098DDDF83DCFE7EE2CC5FA95F6770EA4D1444A2822BB52D29C99C76B139848EDCF296BCD93C2A97478F323A1BFA2D97CCA045C7A706D9A854C98BE2C77EF2C59EF767661124CEACD1AD5BCC5EC5EB7B47E33328D7E0B0A7C051F97C458C344CDA5E100A023A5466947DE0F90406C133BDCE04351C1E3D73CF391A654E307A864EE31016FE7F7861B0C1A63F27ACB1912F53FA03B567AAB749445C7D83B74148EE266B4D0A1F29B5D777E23E213D10E0B3EE9AF9D2831B0711B34AF641AD3EF8235CD9FF55AA690ED14F217B0ACF7DF619C9E19ECBE047CD3FF8809CBE59D74600E129663FA4F2C59A3324CF2AD49AD15424FBA622164BE795F51AC7C03F862E22647B97A9AA4824137AE469B842538696EFE4332738DDD84FFD88BD3E234C7A1F9CC7D84AEC3B863EE9E19EFF51DA20173C0A105CEE0D3B894C2719D52BE9C566FC5C4874E64FD8D4E3CDD7896725157B1A78F9838E77CBC3761D10B71BD139E7D991CB3BBA13F25413C28CF0E7AD2E86E9AAE143F327E8B5B662931E2F8C9C3DC82AD292E06D01579E26FA1D9417AA3982307F08D986B889DB31DD9D7BF3EACD4627C71D81D11FFD7DC8BC6CF07E1C4C747BE3DD83BE22F394C1F824157F556A6EC9D12D2CD56BB68575BD3F99F950AD76F55335CFCE520740AA1794BEC530288D849FCB56510F2C323D182C2313FAE3CD18D88BA107AD78F4678907C52305715F6D1E8EB24C86C549D23623E8AB3711EE3B14C35B59BC235A2E65CA3B20B5246E7E361CC8BE85415572195026C75AA0C311CE0776997D35A11679253243E8C9FE11C8F7F5023308C99C61CA8B9C9CB55DB6F";
    ECB_Mode< AES >::Decryption decryptor;
                            decryptor.SetKey(key, sizeof(key));
                            CryptoPP::StringSource ss(ciphertext, true,
                                new CryptoPP::HexDecoder(
                                    new CryptoPP::StreamTransformationFilter( decryptor,
                                        new CryptoPP::StringSink( decryptedtext ), StreamTransformationFilter::NO_PADDING) ) );

    return decryptedtext;
}

int main (){

	mpz_t g, n, X, Y, K, inv_g, aux;
	
	mpz_init_set_str (n, "340282366920938463463374607431768211297", 10);
	mpz_init_set_str (g, "339661812359158752487805590648382725771", 10);
	mpz_init_set_str (X, "105388965859134860628405048033907802076", 10);
	mpz_init_set_str (Y, "7278554691317770977676438964928646294", 10);
	mpz_init (K);
	mpz_init (inv_g);
	mpz_init (aux);

	// Inverso multiplicativo de g	
	mpz_invert(inv_g, g, n);
	
	// Cálculo da chave //
	mpz_mul(K, X, Y); // X * Y
	mpz_mul(K, K, inv_g); // X * Y * g^-1
	mpz_mod(K, K, n); // x * y * g^-1 mod n
	
	gmp_printf("chave de sessão K: %Zd\n", K);

	mpz_t i256;
	mpz_t temp;
	mpz_init(temp);
	mpz_init_set_str (i256, "256", 10);
	
	int i;
	string bytechave;
	for(i = 0; i < 16; i++){
		mpz_mod(aux, K, i256);
		bytechave+= mpz_get_ui(aux);
		mpz_fdiv_q(K, K, i256);
	}


	//cout << "bytechave: " << bytechave << endl;

    string decryptedtext =  decrypto(bytechave);
	cout << decryptedtext << endl;

    return 0;
}
